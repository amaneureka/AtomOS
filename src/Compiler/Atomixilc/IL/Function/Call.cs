using System;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;

using Atomixilc.Machine;
using Atomixilc.Attributes;
using Atomixilc.IL.CodeType;
using Atomixilc.Machine.x86;

namespace Atomixilc.IL
{
    [ILImpl(ILCode.Call)]
    internal class Call_il : MSIL
    {
        public Call_il()
            : base(ILCode.Call)
        {

        }

        /*
         * URL : https://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.Call(v=vs.110).aspx
         * Description : Calls the method indicated by the passed method descriptor.
         */
        internal override void Execute(Options Config, OpCodeType xOp, MethodBase method, Optimizer Optimizer)
        {
            var target = ((OpMethod)xOp).Value;
            var targetinfo = target as MethodInfo;

            var addressRefernce = target.FullName();
            var parameters = target.GetParameters();

            int count = parameters.Length;

            if (!target.IsStatic)
                count++;

            if (Optimizer.vStack.Count < count)
                throw new Exception("Internal Compiler Error: vStack.Count < expected size");

            /* The stack transitional behavior, in sequential order, is:
             * Method arguments arg1 through argN are pushed onto the stack.
             * Method arguments arg1 through argN are popped from the stack; the method call is performed with these arguments
             * and control is transferred to the method referred to by the method descriptor. When complete,
             * a return value is generated by the callee method and sent to the caller.
             * The return value is pushed onto the stack.
             */

            new Comment(string.Format("[{0}] : {1} => {2}", ToString(), xOp.ToString(), Optimizer.vStack.Count));

            while (count > 0)
            {
                Optimizer.vStack.Pop();
                count--;
            }

            switch (Config.TargetPlatform)
            {
                case Architecture.x86:
                    {
                        if (targetinfo != null &&  Helper.GetTypeSize(targetinfo.ReturnType, Config.TargetPlatform) > 4)
                            throw new Exception(string.Format("UnImplemented '{0}'", msIL));

                        new Call { DestinationRef = addressRefernce };

                        if (targetinfo != null && targetinfo.ReturnType != typeof(void))
                        {
                            new Push { DestinationReg = Register.EAX };
                            Optimizer.vStack.Push(new StackItem(targetinfo.ReturnType));
                        }
                    }
                    break;
                default:
                    throw new Exception(string.Format("Unsupported target platform '{0}' for MSIL '{1}'", Config.TargetPlatform, msIL));
            }
        }
    }
}
